#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

typedef struct {
    int chave;
} ObjetoLista;
typedef struct NoLista *PtrNoLista;
typedef struct NoLista {
    ObjetoLista elemento;
    PtrNoLista proximo;
} NoLista;
typedef struct {
    PtrNoLista primeiro;
    int tamanho;
} Lista;
void iniciaLista(Lista *list) {
    list->primeiro = NULL;
    list->tamanho = 0;
}
void inserirL(Lista *list, ObjetoLista x) {
    PtrNoLista novo;
    novo = (PtrNoLista) malloc(sizeof (NoLista));
    novo->elemento.chave = x.chave;
    if (list->tamanho == 0 || x.chave < list->primeiro->elemento.chave) {
        novo->proximo = list->primeiro;
        list->primeiro = novo;
        list->tamanho++;
    } else {
        PtrNoLista aux;
        aux = list->primeiro;
        while (aux->proximo != NULL && x.chave > aux->proximo->elemento.chave) {
            aux = aux->proximo;
        }
        novo->proximo = aux->proximo;
        aux->proximo = novo;
        list->tamanho++;
    }
}bool estaVaziaL(Lista *list) {
    return (list->tamanho == 0);
}
void imprimirLista(Lista *list) {
    PtrNoLista aux;
    printf("\n[");
    for (aux = list->primeiro; aux != NULL; aux = aux->proximo) {
        printf(" %i ", aux->elemento.chave);
    }
    printf("]\n");
}
typedef struct {
    char *palavra;
    Lista lista;
} objeto;
typedef struct NoTree *PtrNoTree;
typedef struct NoTree {
    objeto elemento;
    PtrNoTree left;
    PtrNoTree right;
} NoArvore;
void iniciaArvore(PtrNoTree *arvore) {
    *arvore = NULL;
}
bool estaVaziaA(PtrNoTree *arvore) {
    return (*arvore == NULL);
}
bool inserirA(PtrNoTree *arvore, objeto x) {
    if (*arvore == NULL) {
        (*arvore) = malloc(sizeof (NoArvore));
        (*arvore)->right = (*arvore)->left = NULL;
        (*arvore)->elemento = x;
        (*arvore)->elemento.total =0;
        iniciaLista(&(*arvore)->elemento.lista);
        return (true);
    }
    if (strcmp((*arvore)->elemento.palavra, x.palavra) == 0) {
        return (false);
    }
    int a = 0;
    for(a; (*arvore)->elemento.palavra[a] == x.palavra[a]; a++);
    if ((*arvore)->elemento.palavra[a] > x.palavra[a]) {
        return (inserirA(&(*arvore)->left, x));
    } else {
        return (inserirA(&(*arvore)->right, x));
    }
    return (false);
}
void preOrdem(PtrNoTree *arvore) {
    if ((*arvore) != NULL) {
        printf("%s\n", (*arvore)->elemento.palavra);
        imprimirLista(&(*arvore)->elemento.lista);
        preOrdem(&(*arvore)->left);
        preOrdem(&(*arvore)->right);
    }
}
void posOrdem(PtrNoTree *arvore) {
    if ((*arvore) != NULL) {
        posOrdem(&(*arvore)->left);
        posOrdem(&(*arvore)->right);
        printf("%s\n", (*arvore)->elemento.palavra);
        imprimirLista(&(*arvore)->elemento.lista);
    }
}
void emOrdem(PtrNoTree *arvore) {
    if ((*arvore) != NULL) {
        emOrdem(&(*arvore)->left);
        printf("%s\n", (*arvore)->elemento.palavra);
        imprimirLista(&(*arvore)->elemento.lista);
        emOrdem(&(*arvore)->right);
    }
}
PtrNoTree getMaxAux(PtrNoTree *arvore) {
    PtrNoTree ret;
    if ((*arvore)->right == NULL) {
        ret = (*arvore);
        (*arvore) = (*arvore)->left;
        return (ret);
    }
    return (getMaxAux(&(*arvore)->right));
}
int pagina;
void compara_Palavra(int x, char compara[x], PtrNoTree *arvore){
    if(strcmp(compara, (*arvore)->elemento.palavra) == 0){
        ObjetoLista obj;
        obj.chave = pagina;
        inserirL(&(*arvore)->elemento.lista, obj);
    }
    if((*arvore)->left != NULL){
        compara_Palavra(x, compara, &(*arvore)->left);
    }
    if((*arvore)->right != NULL){
        compara_Palavra(x, compara, &(*arvore)->right);
    }
}
void imprimir(FILE *saida, PtrNoTree *arvore){
    if((*arvore)->left != NULL){
        imprimir(saida, &(*arvore)->left);
    }
    fprintf(saida, "%s", (*arvore)->elemento.palavra);
    imprimirLista(&(*arvore)->elemento.lista);
    if((*arvore)->right != NULL){
        imprimir(saida, &(*arvore)->right);
    }
}

int main() {

    FILE *arq1;
    FILE *arq2;
    if(argc < 3){
        printf("Numero de argumentos insuficiente!\n");
        exit(1);
    }
    arq1 = fopen(argv[1], "r");
    arq2 = fopen(argv[2], "w");
    if(arq1 == NULL || arq2 == NULL){
        printf("Arquivo faltando!\n");
        exit(1);
    }
    PtrNoTree pont;
    iniciaArvore(&pont);
    objeto obj;
    char PALAVRA[41];
    fgets(PALAVRA, 41, arq1);
    PALAVRA[strcspn(PALAVRA, "\n")] = '\0';
    while(obj.palavra != NULL){
        if(obj.palavra != NULL && strcmp(obj.palavra, "<termos") != 0){
            inserirA(&pont, obj);
        }
        obj.palavra = strtok('\0', ",>");
    }
    char *b;
    char m[41];
    emOrdem(pont);
    while(feof(arq1) == 0){
        fscanf(arq1, "%s", m);
        strtok(m, ".,:");
        if(strcmp(m, "<page") == 0){
            b = strtok('\0', ">");
        }
        else{
            compara_Palavra(41, m, &pont);
        }
    }
    imprimir(arq2, &pont);
    if(fclose(arq1) != 0 || fclose(arq2) != 0){
        printf("Erro ao fechar os arquivos!");
    }
    return 0;
}
